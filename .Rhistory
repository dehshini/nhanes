RIDAGEYR ~ "Age (years), mean",
AGEGROUP ~ "Age Group, %",
FEMALE ~ "Female, %",
EDULEVEL ~ "Education, %",
insurance ~ "Health Insurance, %",
RACE ~ "Race/Ethnicity, %",
FAM_INCOME ~ "Family Income, %",
BMXBMI ~ "BMI (kg/m2)",
BMICAT ~ "BMI Category",
current_smoker ~ "Current Smoker, self-reported or cotinine > 10ng/ml, %",
HBA1C ~ "HbA1c (%), mean",
HBA1C_CAT ~ "HbA1c Categories, %",
diabetes_duration_cat ~ "Time since diabetes diagnosis, %",
hypertension ~ "Hypertension, %",
hypercholesterolemia ~ "Hypercholesterolemia",
CVD ~ "Cardiovascular Disease",
CKD ~ "Chronic Kidney Disease"
)
#### table 1 using low srh
table1low <- tbl_svysummary(
analyze1,
include = c(
RIDAGEYR, AGEGROUP, FEMALE, RACE, FAM_INCOME, EDULEVEL,
insurance,
BMXBMI, BMICAT, current_smoker,
HBA1C, HBA1C_CAT,
diabetes_duration_cat,
hypertension, hypercholesterolemia, CVD, CKD
),
by = low_srh,
statistic = list(
all_continuous() ~ "{mean} ({mean.std.error})",
all_categorical() ~ "{p} ({p.std.error})"
),
digits = list(
all_continuous() ~ c(1, 1),
all_categorical() ~ c(1, 2)
),
missing = "ifany",
missing_text = "Missing",
missing_stat = "{p_miss}",
label = newtable1_labels
) %>%
add_overall(
col_label = "Overall\nMean or % (SE)"
) %>%
modify_spanning_header(
c("stat_1", "stat_2") ~ "**Low SRH**"
) %>%
add_p(
test = list(
all_continuous() ~ "svy.t.test",
all_categorical() ~ "svy.chisq.test"
)
)
table1low %>%
as_gt() %>%
tab_header(
title = "Characteristics of US Adults with Diabetes, Overall and by Low SRH status."
)
# Custom X-axis labels
xlabels <- c("01-02", "03-04", "05-06", "07-08", "09-10", "11-12", "13-14", "15-16", "17-18")
# build a theme for the plot
theme_general <- theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 20)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(plot.caption = element_text(hjust = 0.5)) +
theme(axis.title = element_text(size = 15)) +
theme(axis.text = element_text(size = 14)) +
# add a legend
# theme(legend.position = "top") +
theme(legend.title = element_text(size = 13)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.key.size = unit(1, "cm"))
# load srh summary 1
plot_data <- fread("./out/lowsrh_summary.csv")
head(plot_data)
View(lowsrh_summary)
str(plot_data)
# rename the first column
colnames(plot_data)[1] <- "cycle"
# Create the trends graph with error bars
ggplot(plot_data, aes(x = cycle, y = Proportion)) +
geom_line(group = 1, color = "#292930", linewidth = 1, linetype = "dashed") + # Line for trend
geom_point(color = "#2d03ff", size = 2) + # Points for each cycle
geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.1, color = "#999999", alpha = 0.7) + # Error bars
labs(
title = "Trends of High SRH Among US Adults with Self-Reported Diabetes",
x = "NHANES Cycle",
y = "Proportion (%)"
) +
theme_general +
scale_x_discrete(label = xlabels) +
ylim(0, 100)
weighted_nhanes_list <- lapply(nhanes_list2, create_survey_design)
# rename the list, adding "w" to the name
names(weighted_nhanes_list) <- c("nhanes01_02w", "nhanes03_04w", "nhanes05_06w", "nhanes07_08w", "nhanes09_10w", "nhanes11_12w", "nhanes13_14w", "nhanes15_16w", "nhanes17_18w")
# duplicate the weighted list before modifying
weighted_nhanes_list2 <- weighted_nhanes_list
for (i in 1:length(weighted_nhanes_list)) {
weighted_nhanes_list[[i]] <- subset(weighted_nhanes_list[[i]], RIDAGEYR >= 20 & DIQ010 == 1 & !is.na(HSD010))
}
# high srh. excellent and very good
proportion_highsrh_weighted <- do.call(rbind, lapply(weighted_nhanes_list, calculate_svy_prop, "high_srh"))
#low srh. fair and poor
proportion_lowsrh_weighted <- do.call(rbind, lapply(weighted_nhanes_list, calculate_svy_prop, "low_srh"))
weighted_nhanes_list <- lapply(nhanes_list2, create_survey_design)
# rename the list, adding "w" to the name
names(weighted_nhanes_list) <- c("nhanes01_02w", "nhanes03_04w", "nhanes05_06w", "nhanes07_08w", "nhanes09_10w", "nhanes11_12w", "nhanes13_14w", "nhanes15_16w", "nhanes17_18w")
# duplicate the weighted list before modifying
weighted_nhanes_list2 <- weighted_nhanes_list
for (i in 1:length(weighted_nhanes_list)) {
weighted_nhanes_list[[i]] <- subset(weighted_nhanes_list[[i]], RIDAGEYR >= 20 & DIQ010 == 1 & !is.na(HSD010))
}
#########################################################################
# Function to calculate the weighted proportion for srh
calculate_svy_prop <- function(design, x) {
# Put the variable of interest in a formula
form <- as.formula(paste0("~", x))
# Calculate weighted proportions (multiply by 100 to get percentages)
weighted_props <- svyciprop(form, design, na.rm = TRUE) * 100
# Extract the confidence intervals and multiply to get percentages
Lower_CI <- confint(weighted_props)[1] * 100
Upper_CI <- confint(weighted_props)[2] * 100
unweighted_counts <- table(design$variables[[x]])[2]
# get the standard error
se <- SE(weighted_props) * 100
#design_eff <- deff(svymean(form, design, na.rm = TRUE, deff = TRUE))[[TRUE]]
# Combine into one data frame
full_table <- data.frame(
"Unweighted Count" = unweighted_counts,
"Proportion" = as.numeric(weighted_props),
"Lower_CI" = Lower_CI,
"Upper_CI" = Upper_CI,
"SE" = se
)
## return dataframe
full_table
}
#low srh. fair and poor
proportion_lowsrh_weighted <- do.call(rbind, lapply(weighted_nhanes_list, calculate_svy_prop, "low_srh"))
# Function to load data files from a directory
load_data_files <- function(directory) {
# List all files in the directory
files <- list.files(directory, full.names = TRUE)
# Load each file into a list
data_list <- lapply(files, read_xpt)
# Set names of the list elements to the filenames (without extension)
names(data_list) <- tools::file_path_sans_ext(basename(files))
# Join all data frames in the list
# use the file that begins with "DEMO" as the first data frame
joined_data <- data_list[[grep("^DEMO", names(data_list))]]
# Loop through the remaining data frames and add them to the joined data
for (i in seq_along(data_list)[-grep("^DEMO", names(data_list))]) {
joined_data <- left_join(joined_data, data_list[[i]])
}
# convert the joined data to a data table
setDT(joined_data)
# return the joined data
return(joined_data)
}
# Main directory containing NHANES cycle folders
main_directory <- "./data"
# List all cycle folders
cycle_folders <- list.dirs(main_directory, full.names = TRUE, recursive = FALSE)
# Iterate through each cycle folder
for (cycle_folder in cycle_folders) {
# Extract the cycle name from the folder name
cycle_name <- basename(cycle_folder)
# Load data files in the current cycle folder
cycle_data <- load_data_files(cycle_folder)
# Save the cycle data to an object
assign(paste0("nhanes", cycle_name), cycle_data)
}
source("~/code/R/nhanes/load all data2.r")
# NEW
for (cycle in nhanes_list) {
# create new weights, 9 cycles
cycle[, WTMEC9YR := WTMEC2YR / 9]
# create derived variables
# age group, 1 = 20-39, 2= 40-64, 3 = 65+
cycle[, AGEGROUP := cut(
RIDAGEYR, breaks = c(0, 19.99, 39.99, 64.99, Inf),
labels = c("0-19yeas", "20-39yrs", "40-64yrs", ">=65years"),
right = FALSE
)
]
# female
cycle[, FEMALE := ifelse(RIAGENDR == 2, 1, 0)]
# blood pressure, use any of 4 measurements or take average
cycle[,
SBP := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BPXSY1", "BPXSY2", "BPXSY3", "BPXSY4")
]
cycle[,
DBP := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BPXDI1", "BPXDI2", "BPXDI3", "BPXDI4")
]
# convert 0s to NA
cycle[, SBP := ifelse(SBP == 0, NA, SBP)]
cycle[, DBP := ifelse(DBP == 0, NA, DBP)]
cycle[, BMICAT := cut(
BMXBMI,
breaks = c(-Inf, 24.99, 29.99, Inf),
labels = c("<25", "25 to <30", ">30"),
right = FALSE
)
]
cycle[, MARITAL := ifelse(DMDMARTL %in% c(1, 6), 1,
ifelse(DMDMARTL %in% c(2, 3, 4), 2,
ifelse(DMDMARTL == 5, 3, NA)
)
)]
cycle[, EDULEVEL := ifelse(DMDEDUC2 %in% c(1, 2), 1,
ifelse(DMDEDUC2 == 3, 2,
ifelse(DMDEDUC2 %in% c(4, 5), 3, NA)
)
)]
cycle[, RACE := ifelse(RIDRETH1 == 3, 1,
ifelse(RIDRETH1 == 4, 2,
ifelse(RIDRETH1 %in% c(1, 2), 3,
ifelse(RIDRETH1 %in% c(5), 4, NA)
)
)
)]
cycle[, SMOKE := ifelse(SMQ040 %in% c(1, 2), 1,
ifelse(SMQ020 == 1 & !SMQ040 %in% c(1, 2), 2,
ifelse(SMQ020 == 2, 3, NA)
)
)]
cycle[, current_smoker := ifelse(SMOKE == 1 | LBXCOT > 10, 1, 0)]
# hba1c
cycle[, HBA1C := LBXGH]
# categorize hba1c
cycle[,
HBA1C_CAT := cut(
HBA1C,
breaks = c(-Inf, 6.99, 7.99, 8.99, Inf),
labels = c("<7%", "7-8%", "8-9%", ">9%"),
right = FALSE
)
]
# diabetes duration is held in different variables
# Check if DID040Q exists, if not, use DID040 (first 2 cycles use DID040Q)
# replace extreme values with NA first
if ("DID040Q" %in% names(cycle)) {
cycle[, DID040Q := ifelse(
DID040Q == 99999 | DID040Q == 77777, NA, DID040Q)
]
cycle[, DIAB_DUR := (RIDAGEYR - DID040Q)]
} else {
cycle[, DID040 := ifelse(DID040 == 999 | DID040 == 777, NA, DID040)]
cycle[, DIAB_DUR := (RIDAGEYR - DID040)]
}
# categorize diabetes duration
cycle[, DIAB_DUR_CAT := cut(
DIAB_DUR,
breaks = c(-Inf, 4.99, 14.99, Inf),
labels = c("0 to <5 years", "5 to <15 years", ">=15 years"),
right = FALSE
)
]
# RETINOPATHY
cycle[, RETINOPATHY := ifelse(DIQ080 == 1, 1, 0)]
# ASCVD
cycle[, ASCVD := ifelse(
MCQ160F == 1 | MCQ160E == 1 | MCQ160D == 1 | MCQ160C == 1, 1, 0)
]
# heart failure
cycle[, HEART_FAIL := ifelse(MCQ160B == 1, 1, 0)]
# income poverty ratio
cycle[, PIR := cut(
INDFMPIR,
breaks = PIR_breaks,
labels = PIR_labels,
right = FALSE)
]
cycle[, FAM_INCOME := cut(INDFMPIR, breaks = c(-Inf, 0.99, Inf), labels = c("Below poverty threshold", "Above or at poverty threshold"), right = FALSE)]
# convert sex to M/F
cycle[, sex := ifelse(RIAGENDR == 1, "M", "F")]
# convert ethnicity to black/nonblack
cycle[, ethnicity := ifelse(RACE == 2, "black", "non-black")]
cycle[, eGFR := ckd_epi(creat = LBDSCRSI, age = RIDAGEYR, sex = sex, ethnicity = ethnicity)]
# calculate albumin creat ratio, acr = urxuma/urxucr *100
cycle[, acr := (URXUMA / URXUCR) * 100]
# define ckd
cycle[, CKD := ifelse(eGFR < 60 | acr >= 30, 1,
ifelse(eGFR >= 60 | acr < 30, 0, NA)
)]
cycle[, high_srh := ifelse(HSD010 <= 3, 1, 0)]
cycle[, low_srh := ifelse(HSD010 %in% c(4, 5), 1, 0)]
# bp meds
cycle[, bpmeds := BPQ040A]
cycle[, bpmeds := ifelse(
is.na(bpmeds) & (BPQ010 == 5 | BPQ020 == 2), 0,
ifelse(BPQ040A == 9, NA,
ifelse(BPQ040A == 2, 0, BPQ040A))
)
]
# hypertension
cycle[, hypertension := ifelse(
SBP >= 130 | DBP >= 80 | bpmeds == 1, 1, 0
)]
# cholesterol meds
cycle[, cholmeds := ifelse(
BPQ090D == 1, 1,
ifelse(BPQ090D %in% c(2, 7, 9), 0, NA)
)]
cycle[, hypercholesterolemia := fcase(
!is.na(LBXTC) & LBXTC >= 240, 1,
!is.na(cholmeds) & cholmeds == 1, 1,
is.na(LBXTC) & is.na(cholmeds), NA_real_,
default = 0
)]
# CVD
cycle[, CVD := ifelse(ASCVD == 1 | HEART_FAIL == 1, 1, 0)]
}
#### table 1 using low srh
table1low <- tbl_svysummary(
analyze1,
include = c(
RIDAGEYR, AGEGROUP, FEMALE, RACE, FAM_INCOME, EDULEVEL,
insurance,
BMXBMI, BMICAT, current_smoker,
HBA1C, HBA1C_CAT,
diabetes_duration_cat,
hypertension, hypercholesterolemia, CVD, CKD
),
by = low_srh,
statistic = list(
all_continuous() ~ "{mean} ({mean.std.error})",
all_categorical() ~ "{p} ({p.std.error})"
),
digits = list(
all_continuous() ~ c(1, 1),
all_categorical() ~ c(1, 4)
),
missing = "ifany",
missing_text = "Missing",
missing_stat = "{p_miss}",
label = newtable1_labels
) %>%
add_overall(
col_label = "Overall\nMean or % (SE)"
) %>%
modify_spanning_header(
c("stat_1", "stat_2") ~ "**Low SRH**"
) %>%
add_p(
test = list(
all_continuous() ~ "svy.t.test",
all_categorical() ~ "svy.chisq.test"
)
)
weighted_nhanes_all <- svydesign(
id = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~WTMEC9YR,
nest = TRUE,
data = nhanes_all
)
# get the subset of interest:
# adults aged 20 and over with self-reported diabetes, and have data on srh
analyze1 <- subset(
weighted_nhanes_all,
RIDAGEYR >= 20 & DIQ010 == 1 & !is.na(HSD010)
)
#### table 1 using low srh
table1low <- tbl_svysummary(
analyze1,
include = c(
RIDAGEYR, AGEGROUP, FEMALE, RACE, FAM_INCOME, EDULEVEL,
insurance,
BMXBMI, BMICAT, current_smoker,
HBA1C, HBA1C_CAT,
diabetes_duration_cat,
hypertension, hypercholesterolemia, CVD, CKD
),
by = low_srh,
statistic = list(
all_continuous() ~ "{mean} ({mean.std.error})",
all_categorical() ~ "{p} ({p.std.error})"
),
digits = list(
all_continuous() ~ c(1, 1),
all_categorical() ~ c(1, 4)
),
missing = "ifany",
missing_text = "Missing",
missing_stat = "{p_miss}",
label = newtable1_labels
) %>%
add_overall(
col_label = "Overall\nMean or % (SE)"
) %>%
modify_spanning_header(
c("stat_1", "stat_2") ~ "**Low SRH**"
) %>%
add_p(
test = list(
all_continuous() ~ "svy.t.test",
all_categorical() ~ "svy.chisq.test"
)
)
## TABLE
#############################################################################
#NEW TABLE1 LABELS
newtable1_labels <- list(
RIDAGEYR ~ "Age (years), mean",
AGEGROUP ~ "Age Group, %",
FEMALE ~ "Female, %",
EDULEVEL ~ "Education, %",
insurance ~ "Health Insurance, %",
RACE ~ "Race/Ethnicity, %",
FAM_INCOME ~ "Family Income, %",
BMXBMI ~ "BMI (kg/m2)",
BMICAT ~ "BMI Category",
current_smoker ~ "Current Smoker, self-reported or cotinine > 10ng/ml, %",
HBA1C ~ "HbA1c (%), mean",
HBA1C_CAT ~ "HbA1c Categories, %",
diabetes_duration_cat ~ "Time since diabetes diagnosis, %",
hypertension ~ "Hypertension, %",
hypercholesterolemia ~ "Hypercholesterolemia",
CVD ~ "Cardiovascular Disease",
CKD ~ "Chronic Kidney Disease"
)
#### table 1 using low srh
table1low <- tbl_svysummary(
analyze1,
include = c(
RIDAGEYR, AGEGROUP, FEMALE, RACE, FAM_INCOME, EDULEVEL,
insurance,
BMXBMI, BMICAT, current_smoker,
HBA1C, HBA1C_CAT,
diabetes_duration_cat,
hypertension, hypercholesterolemia, CVD, CKD
),
by = low_srh,
statistic = list(
all_continuous() ~ "{mean} ({mean.std.error})",
all_categorical() ~ "{p} ({p.std.error})"
),
digits = list(
all_continuous() ~ c(1, 1),
all_categorical() ~ c(1, 4)
),
missing = "ifany",
missing_text = "Missing",
missing_stat = "{p_miss}",
label = newtable1_labels
) %>%
add_overall(
col_label = "Overall\nMean or % (SE)"
) %>%
modify_spanning_header(
c("stat_1", "stat_2") ~ "**Low SRH**"
) %>%
add_p(
test = list(
all_continuous() ~ "svy.t.test",
all_categorical() ~ "svy.chisq.test"
)
)
table1low %>%
as_gt() %>%
tab_header(
title = "Characteristics of US Adults with Diabetes, Overall and by Low SRH status."
)
# manipulate the combined dataframe
# convert HSD010(SRH) 7 and 9 to NA
nhanes_all$HSD010 <- ifelse(
nhanes_all$HSD010 %in% c(7, 9), NA, nhanes_all$HSD010
)
# # exclude those whose age is less than 20
nhanes_analytic <- subset(nhanes_all, !is.na(RIDAGEYR) & RIDAGEYR >= 20)
nrow(nhanes_analytic)
# # # keep only those with self reported diabetes
nhanes_analytic <- subset(nhanes_analytic, DIQ010 == 1)
nrow(nhanes_analytic)
# # # keep only those with data on SRH
nhanes_analytic <- subset(nhanes_analytic, !is.na(HSD010))
nrow(nhanes_analytic)
nhanes_analytic_small <- nhanes_analytic[, c(
"SEQN",
"RIDAGEYR",
"DIQ010",
"HSD010",
"AGEGROUP",
"FEMALE",
"EDULEVEL",
"RACE",
"FAM_INCOME",
"BMXBMI",
"BMICAT",
"current_smoker",
"HBA1C",
"HBA1C_CAT",
"diabetes_duration",
"SBP",
"DBP",
"hypertension",
"LBXTC",
"hypercholesterolemia",
"CVD",
"CKD",
"low_srh",
"insurance"
)]
profile_missing(nhanes_analytic_small)
library(gt, gtsummary)         # nice tables
source("~/code/R/learning_curve/script.R")
